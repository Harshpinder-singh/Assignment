{"version":3,"sources":["components/tableShow.js","components/showChart.js","App.js","serviceWorker.js","index.js"],"names":["TableShow","props","state","users","months","xhr","XMLHttpRequest","_this","this","open","send","onload","data","JSON","parse","responseText","setState","className","style","width","map","user","key","id","type","name","start","slice","Number","end","React","Component","ShowChart","check","arr","array","forEach","startDay","endDay","includes","split","push","Date","console","log","height","chartType","loader","options","timeline","singleColor","hAxis","minValue","maxValue","format","rootProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15f770a8.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../bootstrap.css'\r\n\r\nexport default class TableShow extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            users: [],\r\n            months: ['Jan', 'Feb', 'Mar', 'April', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const xhr = new XMLHttpRequest()\r\n        const _this = this\r\n        xhr.open('GET', 'https://cors-anywhere.herokuapp.com/https://totalcloud-static.s3.amazonaws.com/intern.json')\r\n        xhr.send()\r\n        xhr.onload = function () {\r\n            const data = JSON.parse(xhr.responseText)\r\n            _this.setState({ users: data })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th style={{ width: '10%' }}>intern-assignment</th>\r\n                            <th style={{ width: '70%' }}></th>\r\n                            <th style={{ width: '10%' }}>Start date</th>\r\n                            <th style={{ width: '10%' }}>End date</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.users.map(user => (<tr key={user.id}>\r\n                            <td>{user.id}</td>\r\n                            <td><input type=\"checkbox\" />    {user.name}</td>\r\n                            <td>{`${user.start.slice(0, 2)}/${this.state.months[Number(user.start.slice(3, 5)) - 1]}`}</td>\r\n                            <td>{`${user.end.slice(0, 2)}/${this.state.months[Number(user.end.slice(3, 5)) - 1]}`}</td>\r\n                        </tr>))}\r\n\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Chart } from 'react-google-charts'\r\n\r\nexport default class ShowChart extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            users: []\r\n\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const xhr = new XMLHttpRequest()\r\n        const _this = this\r\n        const check = ['01', '02', '03', '04', '05', '06', '07', '08', '09']\r\n        xhr.open('GET', 'https://cors-anywhere.herokuapp.com/https://totalcloud-static.s3.amazonaws.com/intern.json')\r\n        xhr.send()\r\n        let arr = []\r\n        xhr.onload = function () {\r\n            const data = JSON.parse(xhr.responseText)\r\n            const array = [[\r\n                { type: 'string', id: 'Term' },\r\n                { type: 'string', id: 'name' },\r\n                { type: 'date', id: 'Start' },\r\n                { type: 'date', id: 'End' },\r\n            ]]\r\n\r\n\r\n\r\n\r\n            data.forEach(user => {\r\n\r\n                let startDay\r\n                let endDay\r\n                if (check.includes(user.end.split('/')[0])) {\r\n                    endDay = user.end.split('/')[0][1]\r\n                }\r\n                else {\r\n                    endDay = user.end.split('/')[0]\r\n                }\r\n                if (check.includes(user.start.split('/')[0])) {\r\n                    startDay = user.start.split('/')[0][1]\r\n                }\r\n                else {\r\n                    startDay = user.start.split('/')[0]\r\n                }\r\n                arr.push(startDay, endDay)\r\n                array.push([\r\n                    `${user.id}`,\r\n                    user.name,\r\n                    new Date(0, 8, Number(startDay)),\r\n                    new Date(0, 8, Number(endDay))\r\n\r\n                ])\r\n\r\n\r\n            });\r\n            console.log(arr)\r\n            _this.setState({ users: array })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Chart\r\n                width={'100%'}\r\n                height={'90vh'}\r\n                chartType=\"Timeline\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={this.state.users}\r\n                options={{\r\n                    timeline: {\r\n                        singleColor: '#8d8'\r\n\r\n                    },\r\n                    hAxis: {\r\n                        minValue: new Date(0, 7, 31),\r\n                        maxValue: new Date(0, 9, 1),\r\n                        format: 'd',\r\n\r\n                    }\r\n\r\n                }}\r\n\r\n                rootProps={{ 'data-testid': '6' }}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TableShow from './components/tableShow'\nimport ShowChart from './components/showChart'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableShow /> {/*displaying the table */}\n      <ShowChart /> {/*displaying the chart created with google charts */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}